// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
class Animal;
class AnimalDefaultTypeInternal;
extern AnimalDefaultTypeInternal _Animal_default_instance_;
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class Stoune;
class StouneDefaultTypeInternal;
extern StouneDefaultTypeInternal _Stoune_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Animal* Arena::CreateMaybeMessage<::Animal>(Arena*);
template<> ::Context* Arena::CreateMaybeMessage<::Context>(Arena*);
template<> ::Stoune* Arena::CreateMaybeMessage<::Stoune>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Fields : int {
  ANIMAL = 0,
  STOUNE = 1,
  CHEBUREK = 2,
  Fields_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Fields_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Fields_IsValid(int value);
constexpr Fields Fields_MIN = ANIMAL;
constexpr Fields Fields_MAX = CHEBUREK;
constexpr int Fields_ARRAYSIZE = Fields_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Fields_descriptor();
template<typename T>
inline const std::string& Fields_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Fields>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Fields_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Fields_descriptor(), enum_t_value);
}
inline bool Fields_Parse(
    const std::string& name, Fields* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Fields>(
    Fields_descriptor(), name, value);
}
// ===================================================================

class Animal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Animal) */ {
 public:
  inline Animal() : Animal(nullptr) {};
  virtual ~Animal();

  Animal(const Animal& from);
  Animal(Animal&& from) noexcept
    : Animal() {
    *this = ::std::move(from);
  }

  inline Animal& operator=(const Animal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Animal& operator=(Animal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Animal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Animal* internal_default_instance() {
    return reinterpret_cast<const Animal*>(
               &_Animal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Animal& a, Animal& b) {
    a.Swap(&b);
  }
  inline void Swap(Animal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Animal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Animal* New() const final {
    return CreateMaybeMessage<Animal>(nullptr);
  }

  Animal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Animal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Animal& from);
  void MergeFrom(const Animal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Animal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Animal";
  }
  protected:
  explicit Animal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeciesFieldNumber = 1,
    kNameFieldNumber = 2,
    kAgeFieldNumber = 3,
  };
  // string species = 1;
  void clear_species();
  const std::string& species() const;
  void set_species(const std::string& value);
  void set_species(std::string&& value);
  void set_species(const char* value);
  void set_species(const char* value, size_t size);
  std::string* mutable_species();
  std::string* release_species();
  void set_allocated_species(std::string* species);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_species();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_species(
      std::string* species);
  private:
  const std::string& _internal_species() const;
  void _internal_set_species(const std::string& value);
  std::string* _internal_mutable_species();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 3;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Animal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr species_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Stoune PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Stoune) */ {
 public:
  inline Stoune() : Stoune(nullptr) {};
  virtual ~Stoune();

  Stoune(const Stoune& from);
  Stoune(Stoune&& from) noexcept
    : Stoune() {
    *this = ::std::move(from);
  }

  inline Stoune& operator=(const Stoune& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stoune& operator=(Stoune&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stoune& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stoune* internal_default_instance() {
    return reinterpret_cast<const Stoune*>(
               &_Stoune_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stoune& a, Stoune& b) {
    a.Swap(&b);
  }
  inline void Swap(Stoune* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stoune* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stoune* New() const final {
    return CreateMaybeMessage<Stoune>(nullptr);
  }

  Stoune* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stoune>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stoune& from);
  void MergeFrom(const Stoune& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stoune* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Stoune";
  }
  protected:
  explicit Stoune(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlmazFieldNumber = 1,
    kGranitFieldNumber = 2,
    kFuflitFieldNumber = 3,
  };
  // string almaz = 1;
  void clear_almaz();
  const std::string& almaz() const;
  void set_almaz(const std::string& value);
  void set_almaz(std::string&& value);
  void set_almaz(const char* value);
  void set_almaz(const char* value, size_t size);
  std::string* mutable_almaz();
  std::string* release_almaz();
  void set_allocated_almaz(std::string* almaz);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_almaz();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_almaz(
      std::string* almaz);
  private:
  const std::string& _internal_almaz() const;
  void _internal_set_almaz(const std::string& value);
  std::string* _internal_mutable_almaz();
  public:

  // string granit = 2;
  void clear_granit();
  const std::string& granit() const;
  void set_granit(const std::string& value);
  void set_granit(std::string&& value);
  void set_granit(const char* value);
  void set_granit(const char* value, size_t size);
  std::string* mutable_granit();
  std::string* release_granit();
  void set_allocated_granit(std::string* granit);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_granit();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_granit(
      std::string* granit);
  private:
  const std::string& _internal_granit() const;
  void _internal_set_granit(const std::string& value);
  std::string* _internal_mutable_granit();
  public:

  // int32 fuflit = 3;
  void clear_fuflit();
  ::PROTOBUF_NAMESPACE_ID::int32 fuflit() const;
  void set_fuflit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fuflit() const;
  void _internal_set_fuflit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Stoune)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr almaz_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granit_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuflit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Context PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Context) */ {
 public:
  inline Context() : Context(nullptr) {};
  virtual ~Context();

  Context(const Context& from);
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context& operator=(Context&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }
  inline void Swap(Context* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Context* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const final {
    return CreateMaybeMessage<Context>(nullptr);
  }

  Context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Context";
  }
  protected:
  explicit Context(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTxnFieldNumber = 1,
  };
  // repeated bytes data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // int32 txn = 1;
  void clear_txn();
  ::PROTOBUF_NAMESPACE_ID::int32 txn() const;
  void set_txn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_txn() const;
  void _internal_set_txn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Context)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::int32 txn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Animal

// string species = 1;
inline void Animal::clear_species() {
  species_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Animal::species() const {
  // @@protoc_insertion_point(field_get:Animal.species)
  return _internal_species();
}
inline void Animal::set_species(const std::string& value) {
  _internal_set_species(value);
  // @@protoc_insertion_point(field_set:Animal.species)
}
inline std::string* Animal::mutable_species() {
  // @@protoc_insertion_point(field_mutable:Animal.species)
  return _internal_mutable_species();
}
inline const std::string& Animal::_internal_species() const {
  return species_.Get();
}
inline void Animal::_internal_set_species(const std::string& value) {
  
  species_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Animal::set_species(std::string&& value) {
  
  species_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Animal.species)
}
inline void Animal::set_species(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  species_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Animal.species)
}
inline void Animal::set_species(const char* value,
    size_t size) {
  
  species_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Animal.species)
}
inline std::string* Animal::_internal_mutable_species() {
  
  return species_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Animal::release_species() {
  // @@protoc_insertion_point(field_release:Animal.species)
  return species_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Animal::set_allocated_species(std::string* species) {
  if (species != nullptr) {
    
  } else {
    
  }
  species_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), species,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Animal.species)
}
inline std::string* Animal::unsafe_arena_release_species() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Animal.species)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return species_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Animal::unsafe_arena_set_allocated_species(
    std::string* species) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (species != nullptr) {
    
  } else {
    
  }
  species_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      species, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Animal.species)
}

// string name = 2;
inline void Animal::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Animal::name() const {
  // @@protoc_insertion_point(field_get:Animal.name)
  return _internal_name();
}
inline void Animal::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Animal.name)
}
inline std::string* Animal::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Animal.name)
  return _internal_mutable_name();
}
inline const std::string& Animal::_internal_name() const {
  return name_.Get();
}
inline void Animal::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Animal::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Animal.name)
}
inline void Animal::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Animal.name)
}
inline void Animal::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Animal.name)
}
inline std::string* Animal::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Animal::release_name() {
  // @@protoc_insertion_point(field_release:Animal.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Animal::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Animal.name)
}
inline std::string* Animal::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Animal.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Animal::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Animal.name)
}

// int32 age = 3;
inline void Animal::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animal::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Animal::age() const {
  // @@protoc_insertion_point(field_get:Animal.age)
  return _internal_age();
}
inline void Animal::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void Animal::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Animal.age)
}

// -------------------------------------------------------------------

// Stoune

// string almaz = 1;
inline void Stoune::clear_almaz() {
  almaz_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Stoune::almaz() const {
  // @@protoc_insertion_point(field_get:Stoune.almaz)
  return _internal_almaz();
}
inline void Stoune::set_almaz(const std::string& value) {
  _internal_set_almaz(value);
  // @@protoc_insertion_point(field_set:Stoune.almaz)
}
inline std::string* Stoune::mutable_almaz() {
  // @@protoc_insertion_point(field_mutable:Stoune.almaz)
  return _internal_mutable_almaz();
}
inline const std::string& Stoune::_internal_almaz() const {
  return almaz_.Get();
}
inline void Stoune::_internal_set_almaz(const std::string& value) {
  
  almaz_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Stoune::set_almaz(std::string&& value) {
  
  almaz_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Stoune.almaz)
}
inline void Stoune::set_almaz(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  almaz_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Stoune.almaz)
}
inline void Stoune::set_almaz(const char* value,
    size_t size) {
  
  almaz_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Stoune.almaz)
}
inline std::string* Stoune::_internal_mutable_almaz() {
  
  return almaz_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Stoune::release_almaz() {
  // @@protoc_insertion_point(field_release:Stoune.almaz)
  return almaz_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stoune::set_allocated_almaz(std::string* almaz) {
  if (almaz != nullptr) {
    
  } else {
    
  }
  almaz_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), almaz,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Stoune.almaz)
}
inline std::string* Stoune::unsafe_arena_release_almaz() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Stoune.almaz)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return almaz_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stoune::unsafe_arena_set_allocated_almaz(
    std::string* almaz) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (almaz != nullptr) {
    
  } else {
    
  }
  almaz_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      almaz, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Stoune.almaz)
}

// string granit = 2;
inline void Stoune::clear_granit() {
  granit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Stoune::granit() const {
  // @@protoc_insertion_point(field_get:Stoune.granit)
  return _internal_granit();
}
inline void Stoune::set_granit(const std::string& value) {
  _internal_set_granit(value);
  // @@protoc_insertion_point(field_set:Stoune.granit)
}
inline std::string* Stoune::mutable_granit() {
  // @@protoc_insertion_point(field_mutable:Stoune.granit)
  return _internal_mutable_granit();
}
inline const std::string& Stoune::_internal_granit() const {
  return granit_.Get();
}
inline void Stoune::_internal_set_granit(const std::string& value) {
  
  granit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Stoune::set_granit(std::string&& value) {
  
  granit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Stoune.granit)
}
inline void Stoune::set_granit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  granit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Stoune.granit)
}
inline void Stoune::set_granit(const char* value,
    size_t size) {
  
  granit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Stoune.granit)
}
inline std::string* Stoune::_internal_mutable_granit() {
  
  return granit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Stoune::release_granit() {
  // @@protoc_insertion_point(field_release:Stoune.granit)
  return granit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stoune::set_allocated_granit(std::string* granit) {
  if (granit != nullptr) {
    
  } else {
    
  }
  granit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), granit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Stoune.granit)
}
inline std::string* Stoune::unsafe_arena_release_granit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Stoune.granit)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return granit_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stoune::unsafe_arena_set_allocated_granit(
    std::string* granit) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (granit != nullptr) {
    
  } else {
    
  }
  granit_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      granit, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Stoune.granit)
}

// int32 fuflit = 3;
inline void Stoune::clear_fuflit() {
  fuflit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stoune::_internal_fuflit() const {
  return fuflit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stoune::fuflit() const {
  // @@protoc_insertion_point(field_get:Stoune.fuflit)
  return _internal_fuflit();
}
inline void Stoune::_internal_set_fuflit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fuflit_ = value;
}
inline void Stoune::set_fuflit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fuflit(value);
  // @@protoc_insertion_point(field_set:Stoune.fuflit)
}

// -------------------------------------------------------------------

// Context

// int32 txn = 1;
inline void Context::clear_txn() {
  txn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::_internal_txn() const {
  return txn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Context::txn() const {
  // @@protoc_insertion_point(field_get:Context.txn)
  return _internal_txn();
}
inline void Context::_internal_set_txn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  txn_ = value;
}
inline void Context::set_txn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_txn(value);
  // @@protoc_insertion_point(field_set:Context.txn)
}

// repeated bytes data = 2;
inline int Context::_internal_data_size() const {
  return data_.size();
}
inline int Context::data_size() const {
  return _internal_data_size();
}
inline void Context::clear_data() {
  data_.Clear();
}
inline std::string* Context::add_data() {
  // @@protoc_insertion_point(field_add_mutable:Context.data)
  return _internal_add_data();
}
inline const std::string& Context::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& Context::data(int index) const {
  // @@protoc_insertion_point(field_get:Context.data)
  return _internal_data(index);
}
inline std::string* Context::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Context.data)
  return data_.Mutable(index);
}
inline void Context::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Context.data)
  data_.Mutable(index)->assign(value);
}
inline void Context::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Context.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void Context::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Context.data)
}
inline void Context::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Context.data)
}
inline std::string* Context::_internal_add_data() {
  return data_.Add();
}
inline void Context::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Context.data)
}
inline void Context::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Context.data)
}
inline void Context::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Context.data)
}
inline void Context::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Context.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Context::data() const {
  // @@protoc_insertion_point(field_list:Context.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Context::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Context.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Fields> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Fields>() {
  return ::Fields_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
